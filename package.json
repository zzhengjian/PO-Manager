{
	"name": "po-manager",
	"displayName": "PO-Manager",
	"repository": {
		"type": "git",
		"url": "https://github.com/zzhengjian/PO-Manager.git"
	},
	"description": "A tool for managing Page-Object files",
	"version": "0.1.15",
	"publisher": "AlexZheng",
	"icon": "resources/se-icon.png",
	"engines": {
		"vscode": "^1.52.0"
	},
	"categories": [
		"Testing",
		"Debuggers"
	],
	"keywords": [
		"selenium",
		"pom",
		"page object",
		"page object models",
		"testing",
		"nemo",
		"nemo-view"
	],
	"activationEvents": [
		"onLanguage:json",
		"onLanguage:jsonc",
		"onLanguage:javascript"
	],
	"main": "./out/extension.js",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "package-explorer",
					"title": "Package Explorer",
					"icon": "media/dep.svg"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"type": "webview",
					"id": "selDebugger.debuggerView",
					"name": "Debug View",
					"when": "WebdriverEnabled"
				},
				{
					"id": "jsonOutline",
					"name": "Locators",
					"when": "jsonOutlineEnabled"
				},
				{
					"id": "pageView",
					"name": "Page Views"
				}
			]
		},
		"commands": [
			{
				"command": "jsonOutline.refresh",
				"title": "Refresh",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "pageView.startChrome",
				"title": "Start Chrome",
				"icon": {
					"light": "resources/light/Google_Chrome.png",
					"dark": "resources/dark/Google_Chrome.png"
				}
			},
			{
				"command": "pageView.startFirefox",
				"title": "Start Firefox",
				"icon": {
					"light": "resources/light/Firefox_logo.png",
					"dark": "resources/dark/Firefox_logo.png"
				}
			},
			{
				"command": "pageView.startEdge",
				"title": "Start Edge",
				"icon": {
					"light": "resources/light/Edge_Logo.png",
					"dark": "resources/dark/Edge_Logo.png"
				}
			},
			{
				"command": "pageView.stopDriver",
				"title": "Stop Chrome",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "extension.highlight",
				"title": "highlight",
				"icon": {
					"light": "resources/light/highlight.png",
					"dark": "resources/dark/highlight.png"
				}
			},
			{
				"command": "extension.getText",
				"title": "getText"
			},
			{
				"command": "extension.getAttribute",
				"title": "getAttribute"
			},
			{
				"command": "extension.getCssValue",
				"title": "getCssValue"
			},
			{
				"command": "extension.getElementInfo",
				"title": "getElementInfo"
			},
			{
				"command": "extension.showElement",
				"title": "showElement"
			},
			{
				"command": "extension.hideElement",
				"title": "hideElement"
			},
			{
				"command": "extension.click",
				"title": "click"
			},
			{
				"command": "extension.isDisplayed",
				"title": "isDisplayed"
			},
			{
				"command": "extension.isSelected",
				"title": "isSelected"
			},
			{
				"command": "extension.isEnabled",
				"title": "isEnabled"
			},
			{
				"command": "extension.jsClick",
				"title": "jsClick"
			},
			{
				"command": "extension.clear",
				"title": "clear"
			},
			{
				"command": "extension.hover",
				"title": "mouseover"
			},
			{
				"command": "extension.jsHover",
				"title": "jsHover"
			},
			{
				"command": "extension.sendKeys",
				"title": "sendKeys"
			},
			{
				"command": "extension.updateElement",
				"title": "Update Element",
				"icon": {
					"light": "resources/light/updateLocator.png",
					"dark": "resources/dark/updateLocator.png"
				}
			},
			{
				"command": "extension.generateElement",
				"title": "Add Element"
			},
			{
				"command": "extension.generateElements",
				"title": "Add Elements"
			},
			{
				"command": "extension.generateAllElements",
				"title": "Add All Elements"
			},
			{
				"command": "extension.stopDriver",
				"title": "Quit Chrome"
			},
			{
				"command": "extension.getCurrentUrl",
				"title": "getCurrentUrl"
			},
			{
				"command": "extension.selectParentLocator",
				"title": "selectParentLocator"
			},
			{
				"command": "extension.setParentLocator",
				"title": "setParentLocator"
			},
			{
				"command": "extension.clearParentLocator",
				"title": "clearParentLocator"
			},
			{
				"command": "extension.closeTab",
				"title": "closeTab"
			},
			{
				"command": "extension.switchToMainTab",
				"title": "switchToMainTab"
			},
			{
				"command": "extension.switchToNextTab",
				"title": "switchToNextTab"
			},
			{
				"command": "extension.switchToFrame",
				"title": "switchToFrame"
			},
			{
				"command": "extension.switchToParentFrame",
				"title": "switchToParentFrame"
			},
			{
				"command": "extension.switchToDefaultContent",
				"title": "switchToDefaultContent"
			},
			{
				"command": "pageView.refresh",
				"title": "refresh",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "pageView.highlight",
				"title": "highlight",
				"icon": {
					"light": "resources/light/highlight.png",
					"dark": "resources/dark/highlight.png"
				}
			},
			{
				"command": "pageView.openFile",
				"title": "Open File",
				"icon": {
					"light": "resources/light/document.svg",
					"dark": "resources/dark/document.svg"
				}
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "extension.generateElement",
					"group": "selenium@group",
					"when": "ChromeEnabled && jsonOutlineEnabled"
				},
				{
					"command": "extension.generateElements",
					"group": "selenium@group",
					"when": "ChromeEnabled && jsonOutlineEnabled"
				},
				{
					"command": "extension.generateAllElements",
					"group": "selenium@group",
					"when": "ChromeEnabled && jsonOutlineEnabled"
				}
			],
			"view/title": [
				{
					"command": "jsonOutline.refresh",
					"when": "view == jsonOutline",
					"group": "navigation"
				},
				{
					"command": "extension.getCurrentUrl",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "extension.selectParentLocator",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled && enableParentLocator",
					"group": "parentLocator"
				},
				{
					"command": "extension.setParentLocator",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled && enableParentLocator",
					"group": "parentLocator"
				},
				{
					"command": "extension.clearParentLocator",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled && enableParentLocator",
					"group": "parentLocator"
				},
				{
					"command": "extension.switchToMainTab",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "extension.switchToNextTab",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "extension.switchToFrame",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "extension.switchToParentFrame",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "extension.switchToDefaultContent",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled"
				},
				{
					"command": "pageView.stopDriver",
					"when": "view =~ /jsonOutline|pageView/ && WebdriverEnabled",
					"group": "navigation"
				},
				{
					"command": "pageView.startChrome",
					"when": "view =~ /jsonOutline|pageView/ && BrowserName == Chrome",
					"group": "navigation"
				},
				{
					"command": "pageView.startFirefox",
					"when": "view =~ /jsonOutline|pageView/ && BrowserName == Firefox",
					"group": "navigation"
				},
				{
					"command": "pageView.startEdge",
					"when": "view =~ /jsonOutline|pageView/ && BrowserName == Edge",
					"group": "navigation"
				},
				{
					"command": "pageView.refresh",
					"when": "view == pageView",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "extension.getText",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.getAttribute",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.getCssValue",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.showElement",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "jsCommand"
				},
				{
					"command": "extension.hideElement",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "jsCommand"
				},
				{
					"command": "extension.click",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.isDisplayed",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.isEnabled",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.isSelected",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.jsClick",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "jsCommand"
				},
				{
					"command": "extension.updateElement",
					"when": "view == jsonOutline && ChromeEnabled && viewItem == element",
					"group": "inline"
				},
				{
					"command": "extension.clear",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.hover",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.jsHover",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "jsCommand"
				},
				{
					"command": "extension.sendKeys",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "eleCommand"
				},
				{
					"command": "extension.getElementInfo",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "jsCommand"
				},
				{
					"command": "extension.highlight",
					"when": "view == jsonOutline && WebdriverEnabled && viewItem == element",
					"group": "inline"
				},
				{
					"command": "pageView.highlight",
					"when": "view == pageView && WebdriverEnabled && viewItem == element",
					"group": "inline"
				},
				{
					"command": "pageView.openFile",
					"when": "view == pageView && viewItem == file",
					"group": "inline"
				}
			]
		},
		"configuration": [
			{
				"title": "PO-Manager",
				"properties": {
					"jsonOutline.autorefresh": {
						"type": "boolean",
						"default": true
					},
					"jsonOutline.enableParentLocator": {
						"type": "boolean",
						"default": false
					},
					"jsonOutline.browsers": {
						"type": "string",
						"scope": "application",
						"description": "choose browsers to work on",
						"default": "Chrome",
						"enum": [
							"Chrome",
							"Firefox",
							"Edge"
						]
					},
					"jsonOutline.locatorFolder": {
						"type": "string",
						"scope": "application",
						"description": "The path of the folder to store the json locator files.",
						"default": "tests/functional/locator"
					},
					"jsonOutline.pascalCase": {
						"type": "boolean",
						"scope": "application",
						"description": "set true to convert foo-Bar => FooBar",
						"default": true
					},
					"jsonOutline.preserveConsecutiveUppercase": {
						"type": "boolean",
						"scope": "application",
						"description": "set true to preserveConsecutiveUppercase  Foo-BAR => FooBAR",
						"default": true
					},
					"pageView.elementCommands": {
						"type": "array",
						"scope": "application",
						"description": "The element commands set for script generating"
					},
					"pageView.elementNameResolver": {
						"type": "string",
						"scope": "application",
						"description": "The element name resolver from: elementPath (folderName.pageName.elementName)"
					}
				}
			}
		]
	},
	"scripts": {
		"publish": "vsce publish minor",
		"pack": "vsce package",
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"lint": "eslint . --ext .ts,.tsx"
	},
	"devDependencies": {
		"@types/mkdirp": "^0.5.2",
		"@types/node": "^12.12.0",
		"@types/rimraf": "^2.0.2",
		"@types/vscode": "^1.50.0",
		"@typescript-eslint/parser": "^4.16.0",
		"eslint": "^7.21.0",
		"typescript": "^4.2.2"
	},
	"dependencies": {
		"glob": "^7.1.3",
		"jsonc-parser": "^3.0.0",
		"selenium-webdriver": "4.0.0",
		"shush": "^1.0.0",
		"json-format": "1.0.1",
		"engine.io": "^3.4.0"
	}
}
